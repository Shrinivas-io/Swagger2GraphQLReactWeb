{"version":3,"sources":["../node_modules/graphql-language-service-interface/dist sync /^.*$","schema.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","getBodyAndHeaders","body","bodyType","headers","JSON","stringify","URLSearchParams","callBackend","a","requestOptions","method","baseUrl","path","query","searchPath","url","bodyAndHeaders","includes","fetch","credentials","response","text","replace","slice","ok","parse","status","createSchema","context","swaggerSchema","parsedSchema","safeLoad","paths","createSchemaFromSwagger","ReactGA","initialize","debug","window","location","hostname","initialSwaggerSchema","ChangeSchemaForm","onChangeSchema","useState","createSchemaState","setCreateSchemaState","submitRef","useRef","setUrl","useCallback","then","schema","event","category","action","label","error","useEffect","className","onSubmitCapture","preventDefault","currentTarget","value","name","placeholder","defaultValue","type","hidden","ref","onClick","current","click","title","message","App","schemaState","setSchema","dedent","setQuery","graphiqlRef","isExplorerOpen","setIsExplorerOpen","onEdit","onRunOperation","operationName","handleRunQuery","explorerIsOpen","onToggleExplorer","onEditQuery","fetcher","variables","graphql","source","variableValues","result","hasErrors","errors","length","Toolbar","handlePrettifyQuery","handleToggleHistory","Button","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86d09ae0.chunk.js","sourcesContent":["var map = {\n\t\".\": 58,\n\t\"./\": 58,\n\t\"./GraphQLLanguageService\": 109,\n\t\"./GraphQLLanguageService.js\": 109,\n\t\"./GraphQLLanguageService.js.flow\": 286,\n\t\"./autocompleteUtils\": 82,\n\t\"./autocompleteUtils.js\": 82,\n\t\"./autocompleteUtils.js.flow\": 287,\n\t\"./getAutocompleteSuggestions\": 69,\n\t\"./getAutocompleteSuggestions.js\": 69,\n\t\"./getAutocompleteSuggestions.js.flow\": 288,\n\t\"./getDefinition\": 83,\n\t\"./getDefinition.js\": 83,\n\t\"./getDefinition.js.flow\": 289,\n\t\"./getDiagnostics\": 85,\n\t\"./getDiagnostics.js\": 85,\n\t\"./getDiagnostics.js.flow\": 290,\n\t\"./getHoverInformation\": 86,\n\t\"./getHoverInformation.js\": 86,\n\t\"./getHoverInformation.js.flow\": 291,\n\t\"./getOutline\": 108,\n\t\"./getOutline.js\": 108,\n\t\"./getOutline.js.flow\": 292,\n\t\"./index\": 58,\n\t\"./index.js\": 58,\n\t\"./index.js.flow\": 293\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 149;","import {\n  createSchema as createSchemaFromSwagger,\n  CallBackendArguments,\n} from 'swagger-to-graphql';\nimport { safeLoad } from 'js-yaml';\n//import { get } from 'http';\r\n\nfunction getBodyAndHeaders(\n  body: any,\n  bodyType: 'json' | 'formData',\n  headers: { [key: string]: string } | undefined,\n) {\n    if (!body) {\n        //return { headers };\n        return {\r\n            headers: {\n                ////'Authorization': 'Basic VV9QMlBTUl9VUzA4OlNwYXJrMTEx', //'Basic ' + btoa('U_P2PSR_US08' + ':' + 'Spark111')\n                'accept': 'application/json',\r\n                'content-type': 'application/json',\n                'authorization': 'Basic VV9QMlBTUl9VUzA4OlNwYXJrMTEx',\n                ...headers,\n            },\n        };\n    }\n\n  if (bodyType === 'json') {\n    return {\n      headers: {\n            'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: JSON.stringify(body),\n    };\n  }\n\n  return {\n    headers,\n    body: new URLSearchParams(body),\n  };\n}\n\nasync function callBackend({\n  requestOptions: { method, body, baseUrl, path, query, headers, bodyType },\n}: CallBackendArguments<{}>) {\n  const searchPath = query\n    ? `?${new URLSearchParams(query as Record<string, string>)}`\n      : '';\n    const url = `${baseUrl}${path}${searchPath}`;\n  //const url = `https://cors-anywhere.herokuapp.com/${baseUrl}${path}${searchPath}`;\n    const bodyAndHeaders = getBodyAndHeaders(body, bodyType, headers);\n\n  //SAP:Cookie call\n  // eslint-disable-next-line\n    if ( url.includes('dwmgate') ){\n// eslint-disable-next-line\n        const response1 = await fetch('http://dwmgate.wal-mart.com/sap(bD1lbiZjPTEwMA==)/bc/bsp/sap/zgw_openapi/openapi.json?$top=1', {\n            method,\n            headers: {\r\n                'accept': 'application/json',\r\n                'content-type': 'application/json',\r\n                'odata.metadata': 'none',\r\n                'x-csrf-token': 'fetch',\r\n            },\n            ...bodyAndHeaders,\n            credentials: 'include',\n        });\n    }\n\n  const response = await fetch(url, {\n      method,\n      headers: {\r\n          'accept': 'application/json',\r\n          'content-type': 'application/json',\r\n          'odata.metadata': 'none'\r\n      },\n      ...bodyAndHeaders,\n      credentials: 'include',\n  });\n\n    var text = await response.text();\n        if (!text.includes('openapi')) {\n            text = text.replace(\"results\", \"value\");\n            text = text.slice(5, -1);\n            //text = '{\"value\":[{\"Chkty\":\"SC\",\"Scnum\":\"1000123044\",\"Uname\":\"U_P2PSR_US08\",\"Msgty\":\"\",\"Msgid\":\"\",\"Msgno\":\"000\",\"Messg\":\"\",\"Acmsg\":\"\",\"Urlnm\":\"\",\"Stats\":\"Awaiting Approval\",\"Rexst\":\"Yes\",\"Wkitm\":\"000000000000\",\"Wksts\":\"\",\"Aprvr\":\"\",\"Aexst\":\"No\",\"Rhtxt\":\"\",\"Witxt\":\"\",\"Zstore\":\"\"},{\"Chkty\":\"SC\",\"Scnum\":\"1000123044\",\"Uname\":\"U_P2PSR_US08\",\"Msgty\":\"Error\",\"Msgid\":\"ZWM_SRM_EBP_SC\",\"Msgno\":\"001\",\"Messg\":\"Item:1, Product:200014447 \",\"Acmsg\":\"Contact FPMO Support Helpdesk or L2 Support Team\",\"Urlnm\":\"\",\"Stats\":\"Awaiting Approval\",\"Rexst\":\"\",\"Wkitm\":\"000000000000\",\"Wksts\":\"\",\"Aprvr\":\"\",\"Aexst\":\"\",\"Rhtxt\":\"\",\"Witxt\":\"\",\"Zstore\":\"00007\"}]}';\n           \n       }\n\n    if (response.ok) {\n        try {\n            //debugger;\n      return JSON.parse(text);\n    } catch (e) {\n      return text;\n    }\n  }\n  throw new Error(`Response: ${response.status} - ${text}`);\n}\n\nexport const createSchema = async (url: string) => {\n  const swaggerSchema = await callBackend({\n    context: {},\n    requestOptions: {\n      method: 'get',\n      baseUrl: url,\n      path: '',\n      bodyType: 'json',\n    },\n  });\n\n  const parsedSchema =\n    typeof swaggerSchema === 'string' ? safeLoad(swaggerSchema) : swaggerSchema;\n\n    delete parsedSchema.paths[\"/$batch\"];\n\n  return createSchemaFromSwagger({\n    swaggerSchema: parsedSchema,\n    callBackend,\n  });\n};\n","import React, { useRef, useState, useEffect, useCallback } from 'react';\nimport GraphiQL, { ToolbarButton } from 'graphiql';\nimport { graphql, GraphQLSchema } from 'graphql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport dedent from 'dedent';\nimport { createSchema } from './schema';\nimport 'graphiql/graphiql.css';\nimport './App.css';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-148987688-1', {\n  debug: window.location.hostname === 'localhost',\n});\n\nconst initialSwaggerSchema = 'http://dwmgate.wal-mart.com/sap(bD1lbiZjPTEwMA==)/bc/bsp/sap/zgw_openapi/openapi.json?service=ZSRM_GW_SC_TSG_SRV'\n // 'http://dwmgate.wal-mart.com/sap(bD1lbiZjPTEwMA==)/bc/bsp/sap/zgw_openapi/openapi.json?service=ZSRM_GNFR_LITE_APP_SRV'\n//'https://petstore.swagger.io/v2/swagger.json';\n\nconst ChangeSchemaForm = ({\n  onChangeSchema,\n}: {\n  onChangeSchema: (schema: GraphQLSchema) => void;\n}) => {\n  const [createSchemaState, setCreateSchemaState] = useState<\n    'initial' | 'loading' | Error\n  >('loading');\n  const submitRef = useRef<HTMLInputElement | null>(null);\n\n  const setUrl = useCallback(\n    url =>\n      createSchema(url).then(\n        (schema: GraphQLSchema) => {\n          ReactGA.event({\n            category: 'Schema loading',\n            action: 'Load success',\n            label:\n              url === initialSwaggerSchema ? 'default schema' : 'custom schema',\n          });\n          setCreateSchemaState('initial');\n          onChangeSchema(schema);\n        },\n        (error: Error) => {\n          ReactGA.event({\n            category: 'Schema loading',\n            action: 'Load fail',\n            label:\n              url === initialSwaggerSchema ? 'default schema' : 'custom schema',\n          });\n          setCreateSchemaState(error);\n        },\n      ),\n    [setCreateSchemaState, onChangeSchema],\n  );\n\n  useEffect(() => {\n    setUrl(initialSwaggerSchema);\n  }, [setUrl]);\n\n  return (\n    <form\n      className=\"changeSchemaForm\"\n      onSubmitCapture={e => {\n        e.preventDefault();\n        setCreateSchemaState('loading');\n        const url: string = e.currentTarget.url.value;\n        setUrl(url);\n      }}\n    >\n      <input\n        name=\"url\"\n        className=\"urlInput\"\n        placeholder={'Paste a swagger/openapi url here...'}\n        defaultValue={initialSwaggerSchema}\n      />\n      <input type=\"submit\" hidden ref={submitRef} />\n\n      <ToolbarButton\n        onClick={() => {\n          submitRef.current && submitRef.current.click();\n        }}\n        title={'Fetches the Swagger/OpenAPI schema and converts it to GraphQL'}\n        label={\n          createSchemaState === 'loading' ? 'Update schema...' : 'Update schema'\n        }\n      />\n\n      {createSchemaState instanceof Error && (\n        <span className=\"changeSchemaFormError\">{`Error: ${createSchemaState.message}`}</span>\n      )}\n    </form>\n  );\n};\n\nconst App: React.FC = () => {\n  const [schemaState, setSchema] = useState<null | GraphQLSchema>(null);\n  const [query, setQuery] = useState<string>(dedent`\n    # To run the query: click the run button above\n    # To edit the query: use the explorer on the left or edit the text below\n    # To toggle autocomplete: press ctrl + space or cmd + space\n    \n    query PetInfo {\n      findPetsByStatus(status: \"sold\") {\n        id\n        name\n        category {\n          name\n        }\n        tags {\n          name\n        }\n      }\n    }\n  `);\n\n  const graphiqlRef = useRef<any>();\n\n  const [isExplorerOpen, setIsExplorerOpen] = useState<boolean>(true);\n\n  return (\n    <div className=\"graphiql-container\">\n      <GraphiQLExplorer\n        schema={schemaState}\n        query={query}\n        onEdit={setQuery}\n        onRunOperation={(operationName: string) =>\n          graphiqlRef.current.handleRunQuery(operationName)\n        }\n        explorerIsOpen={isExplorerOpen}\n        onToggleExplorer={() => setIsExplorerOpen(!isExplorerOpen)}\n      />\n      <GraphiQL\n        ref={graphiqlRef}\n        schema={schemaState}\n        query={query}\n        onEditQuery={setQuery}\n        fetcher={async ({\n          query,\n          variables,\n          operationName,\n        }: {\n          query: string;\n          variables: { [key: string]: any };\n          operationName?: string;\n        }) => {\n          if (schemaState) {\n            try {\n              const result = await graphql({\n                schema: schemaState,\n                source: query,\n                variableValues: variables,\n                operationName,\n              });\n              const hasErrors = result.errors && result.errors.length;\n              ReactGA.event({\n                category: 'query',\n                action: 'execution success',\n                label: hasErrors ? 'has errors' : 'no errors',\n              });\n              return result;\n            } catch (e) {\n              ReactGA.event({\n                category: 'query',\n                action: 'execution failed',\n              });\n              throw e;\n            }\n          }\n        }}\n      >\n        <GraphiQL.Toolbar>\n          <ChangeSchemaForm onChangeSchema={setSchema} />\n          <ToolbarButton\n            onClick={() => {\n              graphiqlRef.current.handlePrettifyQuery();\n            }}\n            title=\"Prettify Query (Shift-Ctrl-P)\"\n            label=\"Prettify\"\n          />\n          <ToolbarButton\n            onClick={() => {\n              graphiqlRef.current.handleToggleHistory();\n            }}\n            title=\"Show History\"\n            label=\"History\"\n          />\n          <GraphiQL.Button\n            onClick={() => setIsExplorerOpen(!isExplorerOpen)}\n            label=\"Explorer\"\n            title=\"Toggle Explorer\"\n          />\n        </GraphiQL.Toolbar>\n      </GraphiQL>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}